/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type FormSubmission = {
  _id: string;
  _type: "formSubmission";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  contactNumber?: string;
  contactEmail?: string;
  businessName?: string;
  industry?: string;
  locationCity?: string;
  linkedin?: string;
  whichBestDescribesYourNeeds?: string;
  howCanWeHelp?: string;
  lastlyTellUsALittleBitAboutYourself?: string;
  yourResumeCv?: string;
  coverLetter?: string;
};

export type Form = {
  _id: string;
  _type: "form";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  field?: FormBuilder;
  submitButtonText?: string;
  webhookUrl?: string;
  onRedirect?: Link;
};

export type FormFields = {
  _type: "formFields";
  required?: boolean;
  fieldName?: string;
  subtitle?: string;
  placeholder?: string;
  fieldId?: Slug;
  options?: Array<string>;
  inputType?: "text" | "textArea" | "email" | "phone" | "select" | "radio" | "file";
};

export type FormBuilder = {
  _type: "formBuilder";
  formFields?: Array<{
    _key: string;
  } & FormFields>;
};

export type TitleContentButtonImage = {
  _type: "titleContentButtonImage";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  richContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  buttons?: Array<{
    _key: string;
  } & Link>;
};

export type Cta = {
  _type: "cta";
  backgroundImage?: AccessibleImage;
  title?: string;
  richContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  link?: Link;
};

export type SeoPreferences = {
  _id: string;
  _type: "seoPreferences";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fallbackTitle?: string;
  titleSuffix?: string;
  fallbackDescription?: string;
  noindex?: boolean;
  websiteName?: string;
  fallbackSocialImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  fallbackPageAddress?: string;
  twitterAccount?: string;
  defaultTwitter?: "Summary with large image" | "Summary";
};

export type Configuration = {
  _id: string;
  _type: "configuration";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: AccessibleImage;
  offcanvasBackground?: AccessibleImage;
};

export type AccessibleImage = {
  _type: "accessibleImage";
  asset?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
  caption?: string;
};

export type TitleFourColumn = {
  _type: "titleFourColumn";
  title?: string;
  columns?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    title?: string;
    description?: string;
    _key: string;
  }>;
};

export type TitleListButton = {
  _type: "titleListButton";
  title?: string;
  list?: Array<string>;
  button?: Link;
};

export type TitleContentButton = {
  _type: "titleContentButton";
  title?: string;
  richContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  link?: Link;
};

export type LandingBanner = {
  _type: "landingBanner";
  title?: string;
  buttons?: Array<{
    _key: string;
  } & Link>;
};

export type Link = {
  _type: "link";
  text?: string;
  type?: string;
  internalLink?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  url?: string;
  email?: string;
  phone?: string;
  value?: string;
  blank?: boolean;
  parameters?: string;
  anchor?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  seo?: CustomSeoMetaFields;
  title?: string;
  slug?: Slug;
  content?: Array<{
    _key: string;
  } & LandingBanner | {
    _key: string;
  } & TitleContentButton | {
    _key: string;
  } & TitleListButton | {
    _key: string;
  } & TitleFourColumn | {
    _key: string;
  } & Cta | {
    _key: string;
  } & TitleContentButtonImage>;
};

export type CustomSeoMetaFields = {
  _type: "customSeoMetaFields";
  nofollowAttributes?: boolean;
  metaTitle?: string;
  metaDescription?: string;
  metaImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoKeywords?: Array<string>;
  openGraph?: OpenGraph;
  additionalMetaTags?: Array<{
    _key: string;
  } & MetaTag>;
  twitter?: Twitter;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type MetaTag = {
  _type: "metaTag";
  metaAttributes?: Array<{
    _key: string;
  } & MetaAttribute>;
};

export type MetaAttribute = {
  _type: "metaAttribute";
  attributeKey?: string;
  attributeType?: "string" | "image";
  attributeValueImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  attributeValueString?: string;
};

export type SeoMetaFields = {
  _type: "seoMetaFields";
  nofollowAttributes?: boolean;
  metaTitle?: string;
  metaDescription?: string;
  metaImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoKeywords?: Array<string>;
  openGraph?: OpenGraph;
  additionalMetaTags?: Array<{
    _key: string;
  } & MetaTag>;
  twitter?: Twitter;
};

export type Twitter = {
  _type: "twitter";
  cardType?: string;
  creator?: string;
  site?: string;
  handle?: string;
};

export type OpenGraph = {
  _type: "openGraph";
  url?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  title?: string;
  description?: string;
  siteName?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | FormSubmission | Form | FormFields | FormBuilder | TitleContentButtonImage | Cta | SeoPreferences | Configuration | AccessibleImage | TitleFourColumn | TitleListButton | TitleContentButton | LandingBanner | Link | Page | CustomSeoMetaFields | MediaTag | Slug | MetaTag | MetaAttribute | SeoMetaFields | Twitter | OpenGraph | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/api/queries.ts
// Variable: getConfigurations
// Query: *[_type == "configuration"][0]{      _id,      logo,      offcanvasBackground    }
export type GetConfigurationsResult = {
  _id: string;
  logo: AccessibleImage | null;
  offcanvasBackground: AccessibleImage | null;
} | null;
// Variable: getPageSlug
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type GetPageSlugResult = Array<{
  slug: string | null;
}>;
// Variable: getForm
// Query: *[_type == "form" && slug.current == $slug][0]{      field,      title,      slug,      submitButtonText,      webhookUrl,      onRedirect {      ...,      internalLink->{_type, slug, title}      },    }
export type GetFormResult = {
  field: FormBuilder | null;
  title: string | null;
  slug: Slug | null;
  submitButtonText: string | null;
  webhookUrl: string | null;
  onRedirect: {
    _type: "link";
    text?: string;
    type?: string;
    internalLink: {
      _type: "page";
      slug: Slug | null;
      title: string | null;
    } | null;
    url?: string;
    email?: string;
    phone?: string;
    value?: string;
    blank?: boolean;
    parameters?: string;
    anchor?: string;
  } | null;
} | null;
// Variable: getSiteMetadata
// Query: *[_type == "seoPreferences"][0]{      fallbackTitle,      titleSuffix,      fallbackDescription,      noindex,      websiteName,      fallbackSocialImage,      fallbackPageAddress,      twitterAccount,      defaultTwitter    }
export type GetSiteMetadataResult = {
  fallbackTitle: string | null;
  titleSuffix: string | null;
  fallbackDescription: string | null;
  noindex: boolean | null;
  websiteName: string | null;
  fallbackSocialImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  fallbackPageAddress: string | null;
  twitterAccount: string | null;
  defaultTwitter: "Summary with large image" | "Summary" | null;
} | null;
// Variable: getPages
// Query: *[_type == "page"]{      _id,      _createdAt,      title,      "slug": slug.current    }
export type GetPagesResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  slug: string | null;
}>;
// Variable: getPage
// Query: *[_type == "page" && slug.current == $slug][0]{      _id,      _type,      _createdAt,      seo {        _type,        metaTitle,         metaImage,          metaDescription,        nofollowAttributes,        openGraph{          _type,          title,          url,          description,          siteName,          image,        },        seoKeywords,        twitter{          _type,          cardType,          handle,          site,          creator        }      },      title,      "slug": slug.current,      content[]{        ...,        link {          ...,          internalLink->{_type, slug, title}        },        form->{          _id,          title,          slug,          field,          submitButtonText,          webhookUrl,          onRedirect {            ...,            internalLink->{_type, slug, title}          },        },      }    }
export type GetPageResult = {
  _id: string;
  _type: "page";
  _createdAt: string;
  seo: {
    _type: "customSeoMetaFields";
    metaTitle: string | null;
    metaImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    metaDescription: string | null;
    nofollowAttributes: boolean | null;
    openGraph: {
      _type: "openGraph";
      title: string | null;
      url: string | null;
      description: string | null;
      siteName: string | null;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
    } | null;
    seoKeywords: Array<string> | null;
    twitter: {
      _type: "twitter";
      cardType: string | null;
      handle: string | null;
      site: string | null;
      creator: string | null;
    } | null;
  } | null;
  title: string | null;
  slug: string | null;
  content: Array<{
    _key: string;
    _type: "cta";
    backgroundImage?: AccessibleImage;
    title?: string;
    richContent?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    link: {
      _type: "link";
      text?: string;
      type?: string;
      internalLink: {
        _type: "page";
        slug: Slug | null;
        title: string | null;
      } | null;
      url?: string;
      email?: string;
      phone?: string;
      value?: string;
      blank?: boolean;
      parameters?: string;
      anchor?: string;
    } | null;
    form: null;
  } | {
    _key: string;
    _type: "landingBanner";
    title?: string;
    buttons?: Array<{
      _key: string;
    } & Link>;
    link: null;
    form: null;
  } | {
    _key: string;
    _type: "titleContentButton";
    title?: string;
    richContent?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    link: {
      _type: "link";
      text?: string;
      type?: string;
      internalLink: {
        _type: "page";
        slug: Slug | null;
        title: string | null;
      } | null;
      url?: string;
      email?: string;
      phone?: string;
      value?: string;
      blank?: boolean;
      parameters?: string;
      anchor?: string;
    } | null;
    form: null;
  } | {
    _key: string;
    _type: "titleContentButtonImage";
    title?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    richContent?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    buttons?: Array<{
      _key: string;
    } & Link>;
    link: null;
    form: null;
  } | {
    _key: string;
    _type: "titleFourColumn";
    title?: string;
    columns?: Array<{
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      title?: string;
      description?: string;
      _key: string;
    }>;
    link: null;
    form: null;
  } | {
    _key: string;
    _type: "titleListButton";
    title?: string;
    list?: Array<string>;
    button?: Link;
    link: null;
    form: null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"configuration\"][0]{\n      _id,\n      logo,\n      offcanvasBackground\n    }\n": GetConfigurationsResult;
    "\n  *[_type == \"page\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": GetPageSlugResult;
    "\n*[_type == \"form\" && slug.current == $slug][0]{\n      field,\n      title,\n      slug,\n      submitButtonText,\n      webhookUrl,\n      onRedirect {\n      ...,\n      internalLink->{_type, slug, title}\n      },\n    }\n": GetFormResult;
    "\n*[_type == \"seoPreferences\"][0]{\n      fallbackTitle,\n      titleSuffix,\n      fallbackDescription,\n      noindex,\n      websiteName,\n      fallbackSocialImage,\n      fallbackPageAddress,\n      twitterAccount,\n      defaultTwitter\n    }\n  ": GetSiteMetadataResult;
    "\n  *[_type == \"page\"]{\n      _id,\n      _createdAt,\n      title,\n      \"slug\": slug.current\n    }\n  ": GetPagesResult;
    "\n  *[_type == \"page\" && slug.current == $slug][0]{\n      _id,\n      _type,\n      _createdAt,\n      seo {\n        _type,\n        metaTitle, \n        metaImage,  \n        metaDescription,\n        nofollowAttributes,\n        openGraph{\n          _type,\n          title,\n          url,\n          description,\n          siteName,\n          image,\n        },\n        seoKeywords,\n        twitter{\n          _type,\n          cardType,\n          handle,\n          site,\n          creator\n        }\n      },\n      title,\n      \"slug\": slug.current,\n      content[]{\n        ...,\n        link {\n          ...,\n          internalLink->{_type, slug, title}\n        },\n        form->{\n          _id,\n          title,\n          slug,\n          field,\n          submitButtonText,\n          webhookUrl,\n          onRedirect {\n            ...,\n            internalLink->{_type, slug, title}\n          },\n        },\n      }\n    }\n": GetPageResult;
  }
}
